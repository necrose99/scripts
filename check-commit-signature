#!/usr/bin/env bash
##############################################################################
#
# check-commit-signature
# ----------------------
# A server-side update git hook for checking the GPG signature of a pushed
# commit.
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunsignedcommits
#   This boolean sets whether unsigned tags, and merges with unsigned commits
#   into master, are allowed. By default, they are not allowed.
# hooks.allowcommitsonmaster
#   This boolean sets whether non-merge commits are allowed on master. By
#   default, these are not allowed.
# hooks.allowhotfixonmaster
#   The boolean sets whether branches beginning with hotfix-* are allowed on
#   master. NOT YET IMPLEMENTED. CURRENTLY IGNORED.
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#
# @author Isis Agora Lovecruft, 0x2cdb8b35
# @date 10 March 2013
# @version 0.0.1
##############################################################################

## server config
##################
allowunsignedcommits=$(git config --bool hooks.allowunsignedcommits)
allowcommitsonmaster=$(git config --bool hooks.allowcommitsonmaster)
allowhotfixonmaster=$(git config --bool hooks.allowhotfixonmaster)
allowdeletebranch=$(git config --bool hooks.allowdeletebranch)
denycreatebranch=$(git config --bool hooks.denycreatebranch)
allowunannotated=$(git config --bool hooks.allowunannotated)
allowdeletetag=$(git config --bool hooks.allowdeletetag)
allowmodifytag=$(git config --bool hooks.allowmodifytag)

## committers and their signing GPG key fingerprints should go in the
## ${collaborators} array:
##
## we hard code the fingerprint to protect against the possibility of the gpg
## on the remote git server updating the keys (if it is configured to do so,
## and also configured to use short keyids) and pulling in a colliding key from
## a keyserver.
##
declare -A collaborators
collaborators['aagbsn']='91D4 3A5B 1016 CEB6 D352  65AE 2C4B 239D D876 C9F6'
collaborators['hellais']='46E5 EF37 DE26 4EA6 8DCF  53EA E3A2 1297 150F E210'
collaborators['ioerror']='228F AD20 3DE9 AE7D 84E2  5265 CF9A 6F91 4193 A197'
collaborators['isis']='0A6A 58A1 4B59 46AB DE18  E207 A3AD B67A 2CDB 8B35'

## get the keyids from the fingerprints above:
declare -A trusted_keys
for collab in "${!collaborators[@]}"; do
    fpr="${collaborators["$collab"]}"
    shortid=$(echo "$fpr" | cut -d ' ' --output-delimiter='' -f 10,11 )
    trusted_keys["$collab"]="$shortid"

    ## git log --show-signature currently will only give us the shortid
    ##
    ## if someday git will give us a way to get the longid of the signing
    ## key, we should change to:
    #longid=$(gpg --list-keys --with-colon "$shortid" | \
    #    grep ^pub | cut -d ':' -f 5 )
    #trusted_keys["$collab"]="$longid"
done

## $1 is the git ref which is being revised
## $2 is the last HEAD
## $3 is the HEAD commit of the series of commits being applied
ref=$1
rev_old=$2
rev_new=$3
span=$(git rev-list ^$rev_old $rev_new)

## for all the commits in the series, check the type of the commit against the
## commit directly before it:
rev_cur=$rev_old                   ## set the current rev to the previous HEAD
for commit in "$span" ; do

    ## check that the current revison object is a hexidecimal hash of length 40
    check_rev=$(git rev-parse --verify "$commit")
    if [[ "$check_rev" != *[!0-9A-Fa-f]* ]]; then
        echo "*** Commit hash for commit $commit is not hex" >&2
        exit 1
    fi

    hash_len="${#check_rev}"
    if [[ "$hash_len" != 40 ]]; then
        echo "*** Commit hash for commit $commit has bad length of $hash_len " >&2
        exit 1
    fi

    ## get the commit type of the current rev:
    ## a commit with a hash full of zeros is a deletion of a ref
    zero="0000000000000000000000000000000000000000"
    merge=$(git rev-list -n 1 --merges "$rev_cur".."$commit")
    if [ "$commit" = "$zero" ]; then
        commit_type=delete
    else
        if test -n "$merge"; then
            commit_type=merge
        else
            commit_type=$(git cat-file -t "$commit")
        fi
    fi

    ## the following returns non-null if $rev_cur is originating from branches
    ## beginning with the name "devel":
    is_from_develop=$(git branch --contains "$commit" | grep devel )

    ## the following returns non-null if $rev_cur is originating from branches
    ## beginning with the name "release":
    is_from_release=$(git branch --contains "$commit" | grep release )

    ## the following returns non-null if $rev_cur is a signed tag:
    is_signed_tag=$(git tag --verify "$ref" | grep gpg: )

    ## the following returns non-null if $rev_cur has a signature, and gpg reports
    ## the signature is good:
    has_good_sig=$(git log --format=%H --show-signature "$commit" | grep "Good signature")

    ## the following extracts the signing keyid (either short or long) from the
    ## signature on $rev_cur:
    signing_keyid=$(git show --show-signature "$commit" | \
        grep -o -E "key ID [0-9A-Fa-f]{8,16}" | \
        cut -d ' ' -f 3 )

    fpr_signing_keyid= $(gpg --fingerprint $signing_keyid | \
        grep -o -E "([0-9A-F]{4}[[:space:]]{0,2}){10}")

    ## the following is the short reference name for tags, i.e. 'v0.1.2' in
    ## lieu of 'refs/tags/v0.1.2':
    short_ref=${ref##refs/tags/}

    case "$ref","$commit_type" in
        refs/heads/master,commit)
            ## do not allow commits directly onto master
            if [ "$allowcommitsonmaster" != "true" ]; then
                echo "*** The non-merge commit $commit is not allowed to be pushed to master" >&2
                echo "*** Branch master can only take merge commits from branches develop/* and release-* " >&2
                exit 1
            fi
            ;;
        refs/heads/master,merge)
            ## only allow merges to master from release-* and develop/*
            if test -z "$is_from_develop" -a -z "$is_from_release"; then
                echo "*** Branch master only takes merge commits originating from develop/* or release-* branches" >&2
                exit 1
            else
                allowed_keyid=false
                if test -n "$has_good_sig" -a -n "$signing_keyid" ; then
                    for collab in "${!trusted_keys[@]}"; do
                        ## XXX the $keyid is currently only a short key id
                        ## because git doesn't give us a way to ask for a
                        ## long keyid
                        keyid="${trusted_keys["$collab"]}"
                        if [[ "$signing_keyid" == "$keyid" ]]; then
                            ## check that the fingerprint of the key that
                            ## gave us a good signature matches the
                            ## hardcoded ones:
                            if [[ "$fpr_signing_keyid" == "${collaborators["$collab"]}" ]]; then
                                allowed_keyid=true
                                echo "*** Good signature on commit $commit made by $collab with signing key $signing_key " >&2
                            fi
                        fi
                    done
                else
                    echo "*** Missing or bad signature on commit $commit" >&2
                fi

                if ! $allowed_keyid ; then
                    echo "*** Merges to master can only be made from branches with names beginning with release-* or develop/*" >&2
                    echo "*** and must be signed with one of the following keys:" >&2
                    for key in "${trusted_keys[@]}"; do
                        echo "*** $key" >&2
                    done
                fi
            fi
            ;;
        refs/heads/master,delete)
            # delete branch
            if [ "$allowdeletebranch" != "true" ]; then
                echo "*** Deleting master is not allowed in this repository" >&2
                exit 1
            fi
            ;;
        refs/heads/master,*)
            ## kill it with fire
            echo "*** Branch master only takes merge commits originating from develop/* or release-* branches" >&2
            exit 1
            ;;
        refs/tags/*,commit)
            ## un-annotated tag
            if [ "$allowunannotated" != "true" ]; then
                echo "*** The un-annotated tag, ${short_ref}, is not allowed in this repository" >&2
                echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
                exit 1
            fi
            ;;
        refs/tags/*,delete)
            ## delete tag
            if [ "$allowdeletetag" != "true" ]; then
                echo "*** Deleting a tag is not allowed in this repository" >&2
                exit 1
            fi
            ;;
        refs/tags/*,tag)
            ## annotated tag
            if [ "$allowmodifytag" != "true" ] && git rev-parse "$ref" > /dev/null 2>&1 ; then
                echo "*** Tag $shortref already exists." >&2
                echo "*** Modifying a tag is not allowed in this repository." >&2
                exit 1
            else
                ## if it's a tag, check that it's GPG signed

                ## we have to grep for 'gpg:' first, otherwise any tag message
                ## could simply include the words "Good Signature" and pass the
                ## test, same goes for the keyids

                allowed_keyid=false
                for keyid in "${trusted_keys[@]}"; do
                    if test -n "$(git tag --verify $ref | grep gpg: | grep $keyid )"; then
                        allowed_keyid=true
                    fi
                done

                if [[ "$authorized" == "false" ]]; then
                    echo "*** Rejecting tag $short_ref due to lack of a valid GPG signature" >&2
                    echo "*** Authors and keys allowed to create tags on this repo:" >&2
                    for collab in "${!collaborators[@]}"; do
                        keyid="${collaborators["$collab"]}"
                        echo "*** $collab $key " >&2
                    done
                    exit 1
                fi
            fi
            ;;
        refs/heads/*,commit)
            ## commit on a non-master branch
            if [ "$rev_old" = "$zero" -a "$denycreatebranch" = "true" ]; then
                echo "*** Creating a branch is not allowed in this repository" >&2
                exit 1
            fi
            ;;
        refs/remotes/*,commit)
            ## tracking branch
            ;;
        refs/remotes/*,delete)
            ## delete tracking branch
            if [ "$allowdeletebranch" != "true" ]; then
                echo "*** Deleting a tracking branch is not allowed in this repository" >&2
                exit 1
            fi
            ;;
        *)
            ## Anything else (is there anything else?)
            echo "*** Unknown type of update to ref $ref of type $commit_type " >&2
            exit 1
            ;;
    esac
    ## increment the current rev to the $commit we just checked:
    rev_cur=$commit
done
