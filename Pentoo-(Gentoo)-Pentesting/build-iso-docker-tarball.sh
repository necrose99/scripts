unpack_pentoo() {
mkdir -p /mnt/gentoo/root/kenel-configs
# Makedir recursive 
zcat /proc/config.gz > pentoo-livecd.config /mnt/gentoo/root/kenel-configs
#if live get curent runing Kernel Config 
# unpack this stuff. 
unsquashfs -f -d /mnt/gentoo /mnt/cdrom/image.squashfs
unsquashfs -f -d /mnt/gentoo /mnt/cdrom/modules/portage-*.lzm
unsquashfs -f -d /mnt/gentoo /mnt/cdrom/modules/pentoo_overlay-*.lzm
}

setup_resolv() {
    cat >>/etc/mnt/gentoo/resolv.conf <<EOF
nameserver 8.8.8.8 
nameserver 8.8.4.4 
nameserver 2001:4860:4860::8888 
nameserver 2001:4860:4860::8844
EOF
## should be persistive globally, google public dns else others will update# 
}

enter_chroot() {
## Enter CHROOT Default 
mount -o rbind /dev /mnt/gentoo/dev
mount -t proc none /mnt/gentoo/proc
mount -o bind /sys /mnt/gentoo/sys
mount -o bind /tmp /mnt/gentoo/tmp 
cp /etc/portage/make.conf /mnt/gentoo/etc/portage
# When using an existing installation, skip this command.
cp /etc/resolv.conf /mnt/gentoo/etc 
cp /etc/X11/xorg.conf /mnt/gentoo/etc/X11/xorg.conf
chroot /mnt/gentoo /bin/bash
env-update
source /etc/profile
export PS1="(chroot) $PS1"
}

docker_prep() {
### Gentoo Dockerfile items this prepairs the container for docker tarball , for push to Dockerhub. and or pull via dockerfile
## based on Gentoo Offical DOCKERFILES github /  #gentoo-containers
export LANG=en_US
export LANGUAGE=${LANG}
export LC_ALL=${LANG}.UTF-8

echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
#Setup the (virtually) current runlevel 
echo "default" > /run/openrc/softlevel 
# Setup the rc_sys 
sed -e 's/#rc_sys=""/rc_sys="lxc"/g' -i /etc/rc.conf 
# Setup the net.lo runlevel 
RUN ln -s /etc/init.d/net.lo /run/openrc/started/net.lo 
# Setup the net.eth0 runlevel 
ln -s /etc/init.d/net.lo /etc/init.d/net.eth0 
ln -s /etc/init.d/net.eth0 /run/openrc/started/net.eth0 
# By default, UTC system 
echo 'UTC' > /etc/timezone 
}

mk_pentoo_tarball() {
### EDIT Segments For As needed. 
arch="x86"   # x86 amd64 , 
# ARM7 arm8-64 could also be done in docker however bases would need AMD64 (host)  quemu ARM-Seed 
## Should I get a Server I may. 
stub="hardened"  # hardened default. some bash magic could be added hear too... 
year="2015.0"
release="RC4.0"
end="tar.bz2"  ### curently docker suports tar.gz .tar.bz2 .tar.xz
style="-xvjf"   ### -cvpzf (tar.gz) -cJf (tar.xz) -xvjf (tar.bz2)  tar cf - <source folder> | 7z a -si <Destination archive>.tar.7z
tar $style Pentoo_Linux_"$arch"_"$stub"_"$year"_"$release""$end" --exclude=/$style Pentoo_Linux_"$arch"_"$stub"_"$year"_"$release""$end" --one-file-system / 

#!/bin/bash


pentoo-updater() {
#!/bin/sh
source /etc/profile
env-update

if [ -n "${clst_target}" ]; then #we are in catalyst
	mkdir -p /var/log/portage/emerge-info/
	emerge --info > /var/log/portage/emerge-info/emerge-info-$(date "+%Y%m%d").txt
else #we are on a user system
	emerge --sync
fi

safe_exit() {
	#I want a shell when I'm in catalyst but just an exit on failure for users
	if [ -n "${clst_target}" ] && [ -n "${debugshell}" ]; then
		/bin/bash
	elif [ -n "${clst_target}" ] && [ -n "${reckless}" ]; then
		echo "Continuing despite failure...grumble grumble" 1>&2
	#else #let's let it keep going by default instead of just failing out
	#	exit
	fi
}

#first we set the python interpreters to match PYTHON_TARGETS (and ensure the versions we set are actually built)
PYTHON2=$(emerge --info | grep ^PYTHON_TARGETS | cut -d\" -f2 | cut -d" " -f 1 |sed 's#_#.#')
PYTHON3=$(emerge --info | grep ^PYTHON_TARGETS | cut -d\" -f2 | cut -d" " -f 2 |sed 's#_#.#')
eselect python set --python2 ${PYTHON2} || /bin/bash
eselect python set --python3 ${PYTHON3} || /bin/bash
${PYTHON2} -c "from _multiprocessing import SemLock" || emerge -1 python:${PYTHON2#python}
${PYTHON3} -c "from _multiprocessing import SemLock" || emerge -1 python:${PYTHON3#python}
emerge --update --newuse --oneshot --changed-use --newrepo portage || safe_exit

if [ -n "${clst_target}" ]; then
	emerge @changed-deps || safe_exit
fi

emerge --deep --update --newuse -kb --changed-use --newrepo @world || safe_exit

perl-cleaner --ph-clean --modules -- --buildpkg=y || safe_exit

emerge --deep --update --newuse -kb --changed-use --newrepo @world || safe_exit

python-updater -- --buildpkg=y || safe_exit

emerge --deep --update --newuse -kb --changed-use --newrepo @world || safe_exit

#if we are in catalyst, update the extra binpkgs
if [ -n "${clst_target}" ]; then
	#add kde and mate use flags
	echo "pentoo/pentoo kde mate" >> /etc/portage/package.use
	emerge @changed-deps || safe_exit
	emerge --buildpkg --usepkg --onlydeps --oneshot --deep --update --newuse --changed-use --newrepo pentoo/pentoo || safe_exit
	etc-update --automode -5 || safe_exit
fi

portageq list_preserved_libs /
if [ $? = 0 ]; then
	emerge @preserved-rebuild --buildpkg=y || safe_exit
fi
smart-live-rebuild 2>&1 || safe_exit
revdep-rebuild.py -i --no-pretend -- --rebuild-exclude dev-java/swt --exclude dev-java/swt --buildpkg=y || safe_exit
emerge --deep --update --newuse -kb --changed-use --newrepo @world || safe_exit
#we need to do the clean BEFORE we drop the extra flags otherwise all the packages we just built are removed
emerge --depclean || safe_exit
portageq list_preserved_libs /
if [ $? = 0 ]; then
	emerge @preserved-rebuild --buildpkg=y || safe_exit
fi

if [ -n "${clst_target}" ]; then
	if [ -n "${debugshell}" ]; then
		/bin/bash
	fi
	emerge @changed-deps || safe_exit
	etc-update --automode -5 || safe_exit
	eclean-pkg || safe_exit
	emaint binhost || safe_exit
	fixpackages || safe_exit
	#remove kde/mate use flags
	rm /etc/portage/package.use
fi

if [ -f /usr/local/portage/scripts/bug-461824.sh ]; then
	/usr/local/portage/scripts/bug-461824.sh
elif [ -f /var/lib/layman/pentoo/scripts/bug-461824.sh ]; then
	/var/lib/layman/pentoo/scripts/bug-461824.sh
fi

}
eclean_up(){
eclean-dist
eclean distfiles
eclean packages
}

#promt_example() {
# (1) prompt user, and read command line argument
#read -p "Run the cron script now? " answer

# (2) handle the command line argument we were given
#while true
#do
#  case $answer in
#   [yY]* ) /usr/bin/wget -O - -q -t 1 http://www.example.com/cron.php
#           echo "Okay, just ran the cron script."
#           break;;

#   [nN]* ) exit;;

#   * )     echo "Dude, just enter Y or N, please."; break ;;
#  esac
#done
#}

unpack_pentoo
setup_resolv
enter_chroot
eclean_up
docker_prep
#?box_press # runs emerge items for boxes.. virtualbox /vmware
#docker_build # builds docker services locally ie to push directly to dockerhub. 
#vagrant_build ## build packer and vagrant shit 

