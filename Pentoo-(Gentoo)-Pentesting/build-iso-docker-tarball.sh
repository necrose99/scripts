unpack_pentoo() {
mkdir -p /mnt/gentoo/root/kenel-configs
# Makedir recursive 
zcat /proc/config.gz > pentoo-livecd.config /mnt/gentoo/root/kenel-configs
#if live get curent runing Kernel Config 
# unpack this stuff. 
unsquashfs -f -d /mnt/gentoo /mnt/cdrom/image.squashfs
unsquashfs -f -d /mnt/gentoo /mnt/cdrom/modules/portage-*.lzm
unsquashfs -f -d /mnt/gentoo /mnt/cdrom/modules/pentoo_overlay-*.lzm
}

setup_resolv() {
    cat >>/etc/mnt/gentoo/resolv.conf <<EOF
nameserver 8.8.8.8 
nameserver 8.8.4.4 
nameserver 2001:4860:4860::8888 
nameserver 2001:4860:4860::8844
EOF
}

enter_chroot() {
## Enter CHROOT Default 
mount -o rbind /dev /mnt/gentoo/dev
mount -t proc none /mnt/gentoo/proc
mount -o bind /sys /mnt/gentoo/sys
mount -o bind /tmp /mnt/gentoo/tmp 
cp /etc/portage/make.conf /mnt/gentoo/etc/portage
# When using an existing installation, skip this command.
cp /etc/resolv.conf /mnt/gentoo/etc 
cp /etc/X11/xorg.conf /mnt/gentoo/etc/X11/xorg.conf
chroot /mnt/gentoo /bin/bash
env-update
source /etc/profile
export PS1="(chroot) $PS1"
}

docker_prep() {
### Gentoo Dockerfile items this prepairs the container for docker tarball , for push to Dockerhub. 
export LANG=en_US
export LANGUAGE=${LANG}
export LC_ALL=${LANG}.UTF-8

echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
locale-gen
Setup the (virtually) current runlevel 
echo "default" > /run/openrc/softlevel 
# Setup the rc_sys 
sed -e 's/#rc_sys=""/rc_sys="lxc"/g' -i /etc/rc.conf 
# Setup the net.lo runlevel 
RUN ln -s /etc/init.d/net.lo /run/openrc/started/net.lo 
# Setup the net.eth0 runlevel 
ln -s /etc/init.d/net.lo /etc/init.d/net.eth0 
ln -s /etc/init.d/net.eth0 /run/openrc/started/net.eth0 
# By default, UTC system 
echo 'UTC' > /etc/timezone 
}

mk_pentoo_tarball() {
### EDIT Segments For As needed. 
arch="x86"   # x86 amd64 , 
# ARM7 arm8-64 could also be done in docker however bases would need AMD64 (host)  quemu ARM-Seed 
## Should I get a Server I may. 
stub="hardened"  # hardened default. some bash magic could be added hear too... 
year="2015.0"
release="RC4.0"
end="tar.bz2"  ### curently docker suports tar.gz .tar.bz2 .tar.xz
style="-xvjf"   ### -cvpzf (tar.gz) -cJf (tar.xz) -xvjf (tar.bz2)  tar cf - <source folder> | 7z a -si <Destination archive>.tar.7z
tar $style Pentoo_Linux_"$arch"_"$stub"_"$year"_"$release""$end" --exclude=/$style Pentoo_Linux_"$arch"_"$stub"_"$year"_"$release""$end" --one-file-system / 

#!/bin/bash




prepare_portage() {

    #emerge --sync

    echo 'MAKEOPTS="-j5"' >> /etc/portage/make.conf 

    mkdir -p /etc/portage/package.keywords
    mkdir -p /etc/portage/package.use

    echo "sys-apps/entropy ~amd64" >> /etc/portage/package.keywords/entropy
    echo "app-admin/equo ~amd64" >> /etc/portage/package.keywords/entropy

    echo "app-portage/layman git"  > /etc/portage/package.use/layman

    env-update
    source /etc/profile
}

install_layman() {
    emerge -v layman
    layman -a sabayon
    layman -S

    echo "source /var/lib/layman/make.conf" >> /etc/portage/make.conf
    env-update
    source /etc/profile
}


# (1) prompt user, and read command line argument
read -p "Run the cron script now? " answer

# (2) handle the command line argument we were given
while true
do
  case $answer in
   [yY]* ) /usr/bin/wget -O - -q -t 1 http://www.example.com/cron.php
           echo "Okay, just ran the cron script."
           break;;

   [nN]* ) exit;;

   * )     echo "Dude, just enter Y or N, please."; break ;;
  esac
done

unpack_pentoo
setup_resolv
enter_chroot

install_layman
install_entropy
setup_lang
setup_system
prepare_portage
install_layman
install_entropy
